# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

stages:
  - test
  - docs
  - debug-linux-x86_64
  - debug-windows-x86_64
  - build-linux-x86_64
  - build-windows-x86_64

# Use cargo to test the project
test:
  stage: test
  script:
    - "echo \"Package: *\nPin: release a=unstable\nPin-Priority: 490\n\" | tee -a /etc/apt/preferences"
    - "echo \"deb http://deb.debian.org/debian unstable main contrib non-free\ndeb-src http://deb.debian.org/debian unstable main contrib non-free\n\" | tee -a /etc/apt/sources.list"
    - apt-get update && apt-get install -t unstable -y kcov
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose
    - cargo build --verbose   # Needed for kcov
    - kcov target/cov target/debug/signal-gen-cjds66 -h || true
    - "COVERAGE=$(grep -Po 'percent_covered\":\\s+\\\"\\d+.\\d+\\\"' target/cov/signal-gen-cjds66.*/coverage.json | grep -Po '\\d+.\\d+' | tail -n 1)"
    - echo "Coverage:" $COVERAGE

# Use cargo to build the docs
docs:
  stage: docs
  needs: ["test"]
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo doc --workspace --verbose
  artifacts:
    expire_in: never
    paths:
      - target/doc

# Use cargo to build the debug project for linux
debug-linux-x86_64:
  stage: debug-linux-x86_64
  needs: ["test"]
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --verbose
  artifacts:
    expire_in: never
    paths:
      - target/debug

# Use cargo to build the debug project for windows
debug-windows-x86_64:
  stage: debug-windows-x86_64
  needs: ["test"]
  script:
    - apt-get update && apt-get install -y mingw-w64
    - rustup target add x86_64-pc-windows-gnu
    - rustup toolchain install stable-x86_64-pc-windows-gnu
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --target x86_64-pc-windows-gnu --verbose
  artifacts:
    expire_in: never
    paths:
      - target/x86_64-pc-windows-gnu/debug

# Use cargo to build the release project for linux
build-linux-x86_64:
  stage: build-linux-x86_64
  needs: ["test"]
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --release --verbose
  artifacts:
    expire_in: never
    paths:
      - target/release

# Use cargo to build the release project for windows
build-windows-x86_64:
  stage: build-windows-x86_64
  needs: ["test"]
  script:
    - apt-get update && apt-get install -y mingw-w64
    - rustup target add x86_64-pc-windows-gnu
    - rustup toolchain install stable-x86_64-pc-windows-gnu
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --release --target x86_64-pc-windows-gnu --verbose
  artifacts:
    expire_in: never
    paths:
      - target/x86_64-pc-windows-gnu/release
